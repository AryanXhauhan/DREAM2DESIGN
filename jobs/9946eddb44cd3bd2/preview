<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Professional Todo App</title>
    <style>body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f5f5f5;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    color: #333;
}

.container {
    width: 100%;
    max-width: 600px;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

header {
    padding: 20px;
    background-color: #6200ee;
    color: white;
}

header h1 {
    margin: 0 0 20px 0;
    font-weight: 500;
}

.input-container {
    display: flex;
    gap: 10px;
}

input {
    flex: 1;
    padding: 12px 15px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    outline: none;
}

button {
    padding: 12px 20px;
    background-color: #03dac6;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 500;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #018786;
}

main {
    padding: 20px;
}

ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

li {
    padding: 15px;
    border-bottom: 1px solid #eee;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: background-color 0.2s;
}

li:hover {
    background-color: #f9f9f9;
}

li.completed {
    text-decoration: line-through;
    color: #888;
}

.task-actions {
    display: flex;
    gap: 10px;
}

.task-actions button {
    padding: 5px 10px;
    font-size: 14px;
    background-color: transparent;
    color: #888;
}

.task-actions button:hover {
    color: #333;
    background-color: transparent;
}

footer {
    padding: 15px 20px;
    background-color: #f5f5f5;
    border-top: 1px solid #eee;
}

.stats {
    display: flex;
    justify-content: space-between;
    font-size: 14px;
    color: #666;
}

@media (max-width: 600px) {
    .container {
        border-radius: 0;
        min-height: 100vh;
    }
}</style>
</head>
<body>
    <div class="container">
        <header>
            <h1>My Tasks</h1>
            <div class="input-container">
                <input type="text" id="taskInput" placeholder="Add new task...">
                <button id="addTaskBtn">Add</button>
            </div>
        </header>
        <main>
            <ul id="taskList"></ul>
        </main>
        <footer>
            <div class="stats">
                <span id="totalTasks">0 tasks</span>
                <span id="completedTasks">0 completed</span>
            </div>
        </footer>
    </div>
    <script>document.addEventListener('DOMContentLoaded', () => {
    const taskInput = document.getElementById('taskInput');
    const addTaskBtn = document.getElementById('addTaskBtn');
    const taskList = document.getElementById('taskList');
    const totalTasksSpan = document.getElementById('totalTasks');
    const completedTasksSpan = document.getElementById('completedTasks');
    
    let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
    
    function updateStats() {
        const totalTasks = tasks.length;
        const completedTasks = tasks.filter(task => task.completed).length;
        
        totalTasksSpan.textContent = `${totalTasks} ${totalTasks === 1 ? 'task' : 'tasks'}`;
        completedTasksSpan.textContent = `${completedTasks} completed`;
    }
    
    function saveTasks() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
        updateStats();
    }
    
    function renderTasks() {
        taskList.innerHTML = '';
        
        tasks.forEach((task, index) => {
            const li = document.createElement('li');
            if (task.completed) {
                li.classList.add('completed');
            }
            
            li.innerHTML = `
                <span>${task.text}</span>
                <div class="task-actions">
                    <button class="complete-btn" data-index="${index}">
                        ${task.completed ? 'Undo' : 'Complete'}
                    </button>
                    <button class="delete-btn" data-index="${index}">Delete</button>
                </div>
            `;
            
            taskList.appendChild(li);
        });
        
        // Add event listeners to new buttons
        document.querySelectorAll('.complete-btn').forEach(btn => {
            btn.addEventListener('click', toggleComplete);
        });
        
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', deleteTask);
        });
        
        updateStats();
    }
    
    function addTask() {
        const text = taskInput.value.trim();
        if (text === '') {
            alert('Please enter a task');
            return;
        }
        
        tasks.push({
            text,
            completed: false,
            createdAt: new Date().toISOString()
        });
        
        taskInput.value = '';
        saveTasks();
        renderTasks();
    }
    
    function toggleComplete(e) {
        const index = e.target.dataset.index;
        tasks[index].completed = !tasks[index].completed;
        saveTasks();
        renderTasks();
    }
    
    function deleteTask(e) {
        const index = e.target.dataset.index;
        tasks.splice(index, 1);
        saveTasks();
        renderTasks();
    }
    
    // Event listeners
    addTaskBtn.addEventListener('click', addTask);
    
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addTask();
        }
    });
    
    // Initial render
    renderTasks();
});</script>
</body>
</html>